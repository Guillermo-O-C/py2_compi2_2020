/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,18],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,21],$Vf=[2,5,9,15,17,22,24,26,28,31,32,33,38,46,47,84,93],$Vg=[21,41,42,43,44,45],$Vh=[2,140],$Vi=[1,34],$Vj=[1,33],$Vk=[1,39],$Vl=[1,53],$Vm=[2,129],$Vn=[1,42],$Vo=[1,37],$Vp=[1,38],$Vq=[1,40],$Vr=[1,41],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,49],$Vy=[1,51],$Vz=[1,52],$VA=[1,72],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,83],$VG=[1,81],$VH=[1,82],$VI=[1,84],$VJ=[1,86],$VK=[1,87],$VL=[2,78],$VM=[12,15,21,35,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,80],$VN=[1,100],$VO=[1,99],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,106],$VV=[1,107],$VW=[1,108],$VX=[1,109],$VY=[1,110],$VZ=[1,111],$V_=[1,112],$V$=[1,113],$V01=[12,15,21,35,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,80],$V11=[1,123],$V21=[1,130],$V31=[2,5,9,15,17,22,24,26,28,31,32,33,38,46,47,84,93,98,99],$V41=[2,9,15,17,22,24,26,28,31,32,38,46,47,84,98,99],$V51=[2,80],$V61=[1,162],$V71=[2,104],$V81=[1,188],$V91=[21,80],$Va1=[2,87],$Vb1=[1,196],$Vc1=[1,201],$Vd1=[1,198],$Ve1=[1,199],$Vf1=[1,200],$Vg1=[1,202],$Vh1=[1,209],$Vi1=[1,212],$Vj1=[1,207],$Vk1=[1,208],$Vl1=[1,210],$Vm1=[1,211],$Vn1=[1,213],$Vo1=[1,214],$Vp1=[1,215],$Vq1=[1,216],$Vr1=[12,15,21,35,49,50,55,56,57,58,59,60,61,62,74,75,80],$Vs1=[12,15,21,35,49,50,51,52,55,56,57,58,59,60,61,62,74,75,80],$Vt1=[12,15,21,35,55,56,57,58,59,60,61,62,74,75,80],$Vu1=[12,15,21,35,59,60,61,62,74,75,80],$Vv1=[2,85],$Vw1=[1,255],$Vx1=[12,13,15,21,41,80],$Vy1=[2,95],$Vz1=[1,258],$VA1=[1,264],$VB1=[1,268],$VC1=[1,267],$VD1=[1,269],$VE1=[1,270],$VF1=[1,271],$VG1=[1,272],$VH1=[1,273],$VI1=[1,274],$VJ1=[1,275],$VK1=[1,276],$VL1=[1,277],$VM1=[1,278],$VN1=[1,279],$VO1=[1,280],$VP1=[1,282],$VQ1=[1,281],$VR1=[12,35,49,50,51,52,53,54,55,56,57,58,59,60,61,62,75,80],$VS1=[2,118],$VT1=[1,288],$VU1=[1,289],$VV1=[2,127],$VW1=[1,310],$VX1=[1,351],$VY1=[1,349],$VZ1=[1,350],$V_1=[10,13,26,49,63,64,65,66,67,68,69,70,72,76,77],$V$1=[2,113],$V02=[1,376],$V12=[12,35,49,50,55,56,57,58,59,60,61,62,75,80],$V22=[12,35,49,50,51,52,55,56,57,58,59,60,61,62,75,80],$V32=[12,35,55,56,57,58,59,60,61,62,75,80],$V42=[12,35,59,60,61,62,75,80];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"impresion":20,"PUNTO_COMA":21,"R_SWITCH":22,"cases":23,"R_FOR":24,"for_init":25,"IDENTIFICADOR":26,"for_change":27,"R_LET":28,"R_OF":29,"R_IN":30,"R_WHILE":31,"R_DO":32,"R_FUNCTION":33,"parametros":34,"DOS_PUNTOS":35,"tipo":36,"argumentos":37,"R_RETURN":38,"retorno":39,"id":40,"IGUAL":41,"INCREMENTO":42,"DECREMENTO":43,"ASIGNACION_SUMA":44,"ASIGNACION_RESTA":45,"R_BREAK":46,"R_CONTINUE":47,"sentencia":48,"MENOS":49,"MAS":50,"MULTIPLICACION":51,"DIVISION":52,"POTENCIA":53,"MODULO":54,"MAYOR":55,"MENOR":56,"MAYOR_IGUAL":57,"MENOR_IGUAL":58,"IGUALDAD":59,"DISTINTO":60,"AND":61,"OR":62,"NOT":63,"ENTERO":64,"DECIMAL":65,"R_TRUE":66,"R_FALSE":67,"CADENA":68,"CADENA_CHARS":69,"CADENA_EJECUTABLE":70,"objeto":71,"ABRIR_CORCHETE":72,"arrays":73,"CERRAR_CORCHETE":74,"OPERADOR_TERNARIO":75,"R_NULL":76,"R_NEW":77,"R_ARRAY":78,"argumentos_P":79,"COMA":80,"definicion_tipo":81,"definicion":82,"listaID":83,"R_CONST":84,"R_NUMBER":85,"declarar_array":86,"R_STRING":87,"R_BOOLEAN":88,"R_VOID":89,"obj_atributos":90,"obj_atributos_pr":91,"arrays_pr":92,"R_TYPE":93,"type_atributos":94,"type_atributos_pr":95,"R_ELSE":96,"elseIf_P":97,"R_CASE":98,"R_DEFAULT":99,"parametros_pr":100,"array_position":101,"id_pr":102,"R_LENGTH":103,"R_CHARAT":104,"R_TOLOWERCASE":105,"R_TOUPPERCASE":106,"R_CONCAT":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",21:"PUNTO_COMA",22:"R_SWITCH",24:"R_FOR",26:"IDENTIFICADOR",28:"R_LET",29:"R_OF",30:"R_IN",31:"R_WHILE",32:"R_DO",33:"R_FUNCTION",35:"DOS_PUNTOS",38:"R_RETURN",41:"IGUAL",42:"INCREMENTO",43:"DECREMENTO",44:"ASIGNACION_SUMA",45:"ASIGNACION_RESTA",46:"R_BREAK",47:"R_CONTINUE",49:"MENOS",50:"MAS",51:"MULTIPLICACION",52:"DIVISION",53:"POTENCIA",54:"MODULO",55:"MAYOR",56:"MENOR",57:"MAYOR_IGUAL",58:"MENOR_IGUAL",59:"IGUALDAD",60:"DISTINTO",61:"AND",62:"OR",63:"NOT",64:"ENTERO",65:"DECIMAL",66:"R_TRUE",67:"R_FALSE",68:"CADENA",69:"CADENA_CHARS",70:"CADENA_EJECUTABLE",72:"ABRIR_CORCHETE",74:"CERRAR_CORCHETE",75:"OPERADOR_TERNARIO",76:"R_NULL",77:"R_NEW",78:"R_ARRAY",80:"COMA",84:"R_CONST",85:"R_NUMBER",87:"R_STRING",88:"R_BOOLEAN",89:"R_VOID",93:"R_TYPE",96:"R_ELSE",98:"R_CASE",99:"R_DEFAULT",103:"R_LENGTH",104:"R_CHARAT",105:"R_TOLOWERCASE",106:"R_TOUPPERCASE",107:"R_CONCAT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,4],[6,4],[6,2],[6,2],[6,2],[14,2],[14,1],[48,1],[48,8],[48,7],[48,7],[48,11],[48,10],[48,10],[48,7],[48,9],[48,5],[48,3],[48,4],[48,3],[48,3],[48,4],[48,4],[48,2],[48,2],[48,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,5],[11,1],[11,5],[37,2],[37,0],[79,3],[79,0],[7,6],[7,6],[7,2],[83,5],[83,0],[82,2],[82,0],[81,2],[36,2],[36,2],[36,2],[36,2],[36,1],[86,3],[86,0],[71,3],[71,2],[90,4],[91,2],[91,0],[73,2],[73,0],[92,3],[92,0],[8,7],[94,3],[95,2],[95,2],[95,1],[95,1],[95,0],[16,2],[16,0],[97,8],[97,3],[23,5],[23,3],[23,0],[25,6],[25,4],[27,1],[27,1],[27,2],[34,3],[34,0],[100,4],[100,0],[39,1],[39,0],[101,4],[101,0],[40,2],[102,4],[102,3],[102,2],[102,5],[102,4],[102,4],[102,5],[102,0],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,1],[20,1],[20,4],[20,1],[20,1],[20,1],[20,1],[20,1],[20,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal, ErrArr:tempAr};
	
break;
case 2: case 25:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 27: case 86: case 88: case 99: case 107: case 108: case 121: case 122: case 123: case 128:
this.$=$$[$0];
break;
case 6: case 28:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 29:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 30:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 31:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], {id:$$[$0-5], paso:$$[$0-4]}, $$[$0-1]);
break;
case 10: case 32:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 33:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 34:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 35:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 15: case 36:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 16: case 37:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17: case 38: case 120:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 18:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 19:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 20: case 41:
this.$=instruccionesAPI.nuevoAsignacioSuma($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 21: case 42:
this.$=instruccionesAPI.nuevoAsignacioResta($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 22:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1]);
break;
case 23: case 44:
this.$=instruccionesAPI.nuevoBreak();
break;
case 24: case 45:
this.$=instruccionesAPI.nuevoContinue();
break;
case 26:
 this.$ = [$$[$0]]; 
break;
case 39:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 40:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 43:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 46: case 141:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 47: case 142:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 48: case 143:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 49: case 144:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 50: case 145:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 51: case 146:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 52: case 147:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 53: case 148:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 54: case 149:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 55: case 150:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 56: case 151:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 57: case 152:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 58: case 153:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 59: case 154:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 60: case 155:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 61: case 156:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 62: case 158:
 this.$ = $$[$0-1]; 
break;
case 63: case 159:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 64: case 160:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 65: case 161:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line); 
break;
case 66: case 162:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 67: case 163:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 68: case 164:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 69: case 165:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0], _$[$0].first_column, _$[$0].first_line); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line); 
break;
case 73: case 166:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 74: case 167:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 75:
this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.NULL);
break;
case 76:
this.$=instruccionesAPI.nuevoNewArray($$[$0-1]);
break;
case 77:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 78:
this.$ = "Epsilon";
break;
case 79:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0] , _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 80:
this.$ =  "Epsilon";
break;
case 81: case 82:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 83:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  ArrayDeErrores.push({tipo:"sintáctico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yytext});
break;
case 84:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 85: case 97: case 100: case 102: case 104: case 109: case 110: case 111: case 118: case 125: case 127: case 129: case 140:
this.$="Epsilon";
break;
case 87:
this.$="undefined";
break;
case 89: case 90: case 91:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 93:
this.$=instruccionesAPI.nuevoTipo($$[$0], false);
break;
case 94:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 95:
this.$=false;
break;
case 96:
this.$=$$[$0-1];
break;
case 98:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 101: case 103:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 105:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 106:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 112:
 this.$ = $$[$0];
break;
case 113:
 this.$ = "Epsilon"; 
break;
case 114:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 115:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 116:
this.$=instruccionesAPI.nuevoCase($$[$0-3], $$[$0-1], $$[$0]);
break;
case 117:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 119:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1], "Epsilon", _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 124: case 126:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 130:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 131:
this.$="false";
break;
case 132:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 133:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 134:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 135:
this.$=instruccionesAPI.nuevoLength(_$[$0].first_column, _$[$0].first_line);
break;
case 136:
this.$=instruccionesAPI.nuevoCharAt($$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 137:
this.$=instruccionesAPI.nuevoToLowerCase(_$[$0-2].first_column, _$[$0-2].first_line);
break;
case 138:
this.$=instruccionesAPI.nuevoToUpperCase(_$[$0-2].first_column, _$[$0-2].first_line);
break;
case 139:
this.$=instruccionesAPI.nuevoConcat($$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 157:
this.$=instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.CONCATENACION);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,84:$Vd,93:$Ve},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,84:$Vd,93:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,24]},{18:[1,25]},{10:[1,26]},{10:[1,27]},{10:[1,28]},{13:[1,29]},{26:[1,30]},o($Vg,$Vh,{102:32,10:[1,31],18:$Vi,72:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,39:35,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{21:[1,59],41:[1,54],42:[1,55],43:[1,56],44:[1,57],45:[1,58]},{21:[1,60]},{21:[1,61]},{26:[1,62]},{26:[1,63]},{21:[1,64]},{26:[1,65]},{1:[2,1]},o($Vf,[2,2]),{10:$Vk,11:66,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{19:[1,67]},{10:$Vk,11:68,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{25:69,26:$VA,28:[1,70],40:71},{10:$Vk,11:73,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{2:$V0,7:76,9:$VB,14:74,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{10:[1,88]},{10:$Vk,11:90,12:$VL,13:$Vl,26:$Vn,37:89,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($VM,[2,132]),{10:$Vk,11:91,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{26:[1,92],103:[1,93],104:[1,94],105:[1,95],106:[1,96],107:[1,97]},{21:[1,98]},{21:[2,128],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:114,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:115,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:116,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V01,[2,63]),o($V01,[2,64]),o($V01,$Vh,{102:32,10:[1,117],18:$Vi,72:$Vj}),o($V01,[2,66]),o($V01,[2,67]),o($V01,[2,68]),o($V01,[2,69]),o($V01,[2,70]),o($V01,[2,71]),{10:$Vk,11:119,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,73:118,74:[2,102],76:$Vy,77:$Vz},o($V01,[2,73]),o($V01,[2,75]),{78:[1,120]},{15:[1,122],26:$V11,90:121},{10:$Vk,11:124,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{21:[1,125]},{21:[1,126]},{10:$Vk,11:127,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:128,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),{35:$V21,81:129},{35:$V21,81:131},o($V31,[2,83]),{41:[1,132]},{12:[1,133],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:[1,134]},{12:[1,135],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:136,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{26:[1,137]},{41:[1,138]},{18:$Vi,41:$Vh,72:$Vj,102:32},{12:[1,139],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,15:[1,140],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($V41,[2,26]),o($V41,[2,27]),{10:[1,142]},{18:[1,143]},{10:[1,144]},{10:[1,145]},{10:[1,146]},{13:[1,147]},o($Vg,$Vh,{102:32,10:[1,148],18:$Vi,72:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,39:149,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{21:[1,155],41:[1,150],42:[1,151],43:[1,152],44:[1,153],45:[1,154]},{21:[1,156]},{21:[1,157]},{12:[2,125],26:[1,159],34:158},{12:[1,160]},{12:$V51,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$,79:161,80:$V61},{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,74:[1,163],75:$V$},o($VM,$Vh,{102:164,18:$Vi,72:$Vj}),o($VM,[2,135]),{10:[1,165]},{10:[1,166]},{10:[1,167]},{10:[1,168]},o($Vf,[2,16]),{10:$Vk,11:169,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:170,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:171,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:172,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:173,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:174,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:175,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:176,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:177,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:178,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:179,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:180,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:181,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:182,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:183,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V01,[2,46]),o($V01,[2,61]),{12:[1,184],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:90,12:$VL,13:$Vl,26:$Vn,37:185,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{74:[1,186]},{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,74:$V71,75:$V$,80:$V81,92:187},{10:[1,189]},{15:[1,190]},o($V01,[2,97]),{35:[1,191]},{21:[1,192],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($Vf,[2,18]),o($Vf,[2,19]),{21:[1,193],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{21:[1,194],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($V91,$Va1,{82:195,41:$Vb1}),{26:$Vc1,36:197,85:$Vd1,87:$Ve1,88:$Vf1,89:$Vg1},o($V91,$Va1,{82:203,41:$Vb1}),{13:[1,204]},{13:[1,205]},{10:$Vh1,20:206,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{13:[1,218]},{21:[1,219],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{29:[1,220],30:[1,221],35:$V21,81:222},{10:$Vk,11:223,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{13:[1,224]},{31:[1,225]},o($V41,[2,25]),{10:$Vk,11:226,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{19:[1,227]},{10:$Vk,11:228,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{25:229,26:$VA,28:[1,230],40:71},{10:$Vk,11:231,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{2:$V0,7:76,9:$VB,14:232,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{10:$Vk,11:90,12:$VL,13:$Vl,26:$Vn,37:233,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{21:[1,234]},{10:$Vk,11:235,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{21:[1,236]},{21:[1,237]},{10:$Vk,11:238,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:239,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V41,[2,43]),o($V41,[2,44]),o($V41,[2,45]),{12:[1,240]},{35:$V21,81:241},{21:[1,242]},{12:[2,77]},{10:$Vk,11:243,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($VM,$Vh,{102:244,18:$Vi,72:$Vj}),o($VM,[2,134]),{10:$Vk,11:245,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{12:[1,246]},{12:[1,247]},{10:$Vk,11:248,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($Vr1,[2,47],{51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vr1,[2,48],{51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vs1,[2,49],{53:$VR,54:$VS}),o($Vs1,[2,50],{53:$VR,54:$VS}),o($V01,[2,51]),o($V01,[2,52]),o($Vt1,[2,53],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vt1,[2,54],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vt1,[2,55],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vt1,[2,56],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vu1,[2,57],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW}),o($Vu1,[2,58],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW}),o([12,15,21,35,61,62,74,75,80],[2,59],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY}),o([12,15,21,35,62,74,75,80],[2,60],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),{35:[1,249],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($V01,[2,62]),{12:[1,250]},o($V01,[2,72]),{74:[2,101]},{10:$Vk,11:251,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:252,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V01,[2,96]),{10:$Vk,11:253,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($Vf,[2,17]),o($Vf,[2,20]),o($Vf,[2,21]),{21:$Vv1,80:$Vw1,83:254},{10:$Vk,11:256,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o([12,15,21,41,80],[2,88]),o($Vx1,$Vy1,{86:257,72:$Vz1}),o($Vx1,$Vy1,{86:259,72:$Vz1}),o($Vx1,$Vy1,{86:260,72:$Vz1}),o($Vx1,$Vy1,{86:261,72:$Vz1}),o($Vx1,[2,93]),{21:$Vv1,80:$Vw1,83:262},{26:$VA1,94:263},{2:$V0,7:76,9:$VB,14:265,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{12:[1,266],49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1,62:$VO1,75:$VP1,80:$VQ1},{10:$Vh1,20:283,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:284,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:285,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},o($VR1,[2,159]),o($VR1,[2,160]),o($VR1,$Vh,{102:32,10:[1,286],18:$Vi,72:$Vj}),o($VR1,[2,162]),o($VR1,[2,163]),o($VR1,[2,164]),o($VR1,[2,165]),o($VR1,[2,166]),{15:$VS1,23:287,98:$VT1,99:$VU1},{26:[1,290]},{10:$Vk,11:291,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:292,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{41:[1,293]},{21:[1,294],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,14:295,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{10:[1,296]},{12:[1,297],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:[1,298]},{12:[1,299],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:300,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{26:[1,301]},{12:[1,302],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,15:[1,303],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{12:[1,304]},o($V41,[2,37]),{21:[1,305],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($V41,[2,39]),o($V41,[2,40]),{21:[1,306],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{21:[1,307],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{35:[1,308]},{12:$VV1,80:$VW1,100:309},o($Vf,[2,15]),{12:$V51,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$,79:311,80:$V61},o($VM,[2,133]),{12:[1,312],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($VM,[2,137]),o($VM,[2,138]),{12:[1,313],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:314,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V01,[2,65]),{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,74:$V71,75:$V$,80:$V81,92:315},{12:[1,316],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{15:[2,100],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$,80:[1,318],91:317},{21:[1,319]},{26:[1,320]},o($V91,[2,86],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$}),o($Vx1,[2,89]),{74:[1,321]},o($Vx1,[2,90]),o($Vx1,[2,91]),o($Vx1,[2,92]),{21:[1,322]},{15:[1,323]},{35:$V21,81:324},{2:$V0,7:76,9:$VB,15:[1,325],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{21:[1,326]},{10:$Vh1,20:327,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:328,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:329,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:330,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:331,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:332,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:333,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:334,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:335,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:336,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:337,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:338,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:339,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:340,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:341,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},{10:$Vh1,20:342,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},o($VR1,[2,141]),o($VR1,[2,156]),{12:[1,343],49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1,62:$VO1,75:$VP1,80:$VQ1},{10:$Vk,11:90,12:$VL,13:$Vl,26:$Vn,37:344,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{15:[1,345]},{10:$Vk,11:346,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{35:[1,347]},{27:348,41:$VX1,42:$VY1,43:$VZ1},{12:[1,352],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{12:[1,353],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{10:$Vk,11:354,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},o($V_1,[2,120]),{2:$V0,7:76,9:$VB,15:[1,355],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{10:$Vk,11:356,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{13:[1,357]},{10:$Vk,11:358,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{13:[1,359]},{21:[1,360],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{29:[1,361],30:[1,362],35:$V21,81:222},{13:[1,363]},{31:[1,364]},{21:[1,365]},o($V41,[2,38]),o($V41,[2,41]),o($V41,[2,42]),{26:$Vc1,36:366,85:$Vd1,87:$Ve1,88:$Vf1,89:$Vg1},{12:[2,124]},{26:[1,367]},{12:[2,79]},o($VM,[2,136]),o($VM,[2,139]),o([12,15,21,35,74,75,80],[2,74],{49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_}),{74:[2,103]},o($V01,[2,76]),{15:[2,98]},{26:$V11,90:368},o($V31,[2,81]),{35:$V21,81:369},o($Vx1,$Vy1,{86:370,72:$Vz1}),o($V31,[2,82]),{21:[1,371]},{15:[2,111],21:[1,374],80:[1,373],95:372},o($Vf,$V$1,{16:375,96:$V02}),o($Vf,[2,7]),o($V12,[2,142],{51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V12,[2,143],{51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V22,[2,144],{53:$VF1,54:$VG1}),o($V22,[2,145],{53:$VF1,54:$VG1}),o($VR1,[2,146]),o($VR1,[2,147]),o($V32,[2,148],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V32,[2,149],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V32,[2,150],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V32,[2,151],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1}),o($V42,[2,152],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1}),o($V42,[2,153],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1}),o([12,35,61,62,75,80],[2,154],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1}),o([12,35,62,75,80],[2,155],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1}),o([12,35,80],[2,157],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1,62:$VO1,75:$VP1}),{35:[1,377],49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1,62:$VO1,75:$VP1,80:$VQ1},o($VR1,[2,158]),{12:[1,378]},o($Vf,[2,8]),{35:[1,379],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,14:380,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{12:[1,381]},{12:[2,121]},{12:[2,122]},{10:$Vk,11:382,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{13:[1,383]},{13:[1,384]},{21:[1,385],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($Vf,[2,12]),{12:[1,386],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,14:387,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{12:[1,388],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{15:$VS1,23:389,98:$VT1,99:$VU1},{26:[1,390]},{10:$Vk,11:391,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{10:$Vk,11:392,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{2:$V0,7:76,9:$VB,14:393,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{10:[1,394]},o($V41,[2,36]),{13:[1,395]},{35:$V21,81:396},{15:[2,99]},o($V91,$Va1,{82:397,41:$Vb1}),o($Vx1,[2,94]),o($Vf,[2,105]),{15:[2,106]},{15:[2,109],26:$VA1,94:398},{15:[2,110],26:$VA1,94:399},o($Vf,[2,6]),{9:[1,401],13:[1,402],97:400},{10:$Vh1,20:403,26:$Vi1,40:217,49:$Vj1,63:$Vk1,64:$Vl1,65:$Vm1,66:$Vn1,67:$Vo1,68:$Vp1,69:$Vq1},o($VR1,[2,161]),{2:$V0,7:76,9:$VB,14:404,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{2:$V0,7:76,9:$VB,15:[2,117],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{13:[1,405]},{12:[2,123],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,14:406,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{2:$V0,7:76,9:$VB,14:407,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},o($V_1,[2,119]),{21:[1,408]},{2:$V0,7:76,9:$VB,15:[1,409],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{21:[1,410]},{15:[1,411]},{27:412,41:$VX1,42:$VY1,43:$VZ1},{12:[1,413],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{12:[1,414],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,7:76,9:$VB,15:[1,415],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{10:$Vk,11:416,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{2:$V0,4:417,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,84:$Vd,93:$Ve},{12:$VV1,80:$VW1,100:418},{21:$Vv1,80:$Vw1,83:419},{15:[2,107]},{15:[2,108]},o($V31,[2,112]),{10:[1,420]},{2:$V0,7:76,9:$VB,14:421,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},o([12,35,75,80],[2,167],{49:$VB1,50:$VC1,51:$VD1,52:$VE1,53:$VF1,54:$VG1,55:$VH1,56:$VI1,57:$VJ1,58:$VK1,59:$VL1,60:$VM1,61:$VN1,62:$VO1}),{2:$V0,7:76,9:$VB,15:$VS1,17:$VC,22:$VD,23:422,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd,98:$VT1,99:$VU1},{2:$V0,7:76,9:$VB,14:423,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{2:$V0,7:76,9:$VB,15:[1,424],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{2:$V0,7:76,9:$VB,15:[1,425],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($Vf,[2,13]),o($V41,$V$1,{16:426,96:$V02}),o($V41,[2,29]),o($V41,[2,30]),{12:[1,427]},{13:[1,428]},{13:[1,429]},o($V41,[2,34]),{12:[1,430],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},{2:$V0,6:23,7:4,8:5,9:$V1,15:[1,431],17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,84:$Vd,93:$Ve},{12:[2,126]},{21:[2,84]},{10:$Vk,11:432,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy,77:$Vz},{2:$V0,7:76,9:$VB,15:[1,433],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{15:[2,116]},{2:$V0,7:76,9:$VB,15:[1,434],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($Vf,[2,10]),o($Vf,[2,11]),o($V41,[2,28]),{13:[1,435]},{2:$V0,7:76,9:$VB,14:436,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{2:$V0,7:76,9:$VB,14:437,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{21:[1,438]},o($Vf,[2,14]),{12:[1,439],49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,75:$V$},o($V31,[2,115]),o($Vf,[2,9]),{2:$V0,7:76,9:$VB,14:440,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},{2:$V0,7:76,9:$VB,15:[1,441],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},{2:$V0,7:76,9:$VB,15:[1,442],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($V41,[2,35]),{13:[1,443]},{2:$V0,7:76,9:$VB,15:[1,444],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($V41,[2,32]),o($V41,[2,33]),{2:$V0,7:76,9:$VB,14:445,17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:75,84:$Vd},o($V41,[2,31]),{2:$V0,7:76,9:$VB,15:[1,446],17:$VC,22:$VD,24:$VE,26:$VF,28:$V6,31:$VG,32:$VH,38:$VI,40:85,46:$VJ,47:$VK,48:141,84:$Vd},o($V31,$V$1,{16:447,96:$V02}),o($V31,[2,114])],
defaultActions: {22:[2,1],161:[2,77],187:[2,101],309:[2,124],311:[2,79],315:[2,103],317:[2,98],349:[2,121],350:[2,122],368:[2,99],372:[2,106],398:[2,107],399:[2,108],418:[2,126],419:[2,84],422:[2,116]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 85;
break;
case 1:return 88;
break;
case 2:return 87;
break;
case 3:return 28;
break;
case 4:return 84;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 67;
break;
case 8:return 66;
break;
case 9:return 9;
break;
case 10:return 96;
break;
case 11:return 22;
break;
case 12:return 98;
break;
case 13:return 99;
break;
case 14:return 46;
break;
case 15:return 47;
break;
case 16:return 31;
break;
case 17:return 32;
break;
case 18:return 24;
break;
case 19:return 89;
break;
case 20:return 38;
break;
case 21:return 'R_PUSH';
break;
case 22:return 'R_POP';
break;
case 23:return 103;
break;
case 24:return 93;
break;
case 25:return 29;
break;
case 26:return 30;
break;
case 27:return 33 ;
break;
case 28:return 76;
break;
case 29:return 'R_GRAFICAR_TS';
break;
case 30:return 104;
break;
case 31:return 105;
break;
case 32:return 106;
break;
case 33:return 107;
break;
case 34:return 77;
break;
case 35:return 78;
break;
case 36: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 68;
break;
case 37: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69;
break;
case 38: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70;
break;
case 39:return 65;
break;
case 40:return 64;
break;
case 41:return 26;
break;
case 42:
break;
case 43:// comentario simple línea
break;
case 44:// comentario multiple líneas
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 44;
break;
case 48:return 50;
break;
case 49:return 45;
break;
case 50:return 49;
break;
case 51:return 53;
break;
case 52:return 51;
break;
case 53:return 52;
break;
case 54:return 54;
break;
case 55:return 59;
break;
case 56:return 60;
break;
case 57:return 41;
break;
case 58:return 57;
break;
case 59:return 55;
break;
case 60:return 58;
break;
case 61:return 56;
break;
case 62:return 61;
break;
case 63:return 62;
break;
case 64:return 63;
break;
case 65:return 13;
break;
case 66:return 15;
break;
case 67:return 10;
break;
case 68:return 12;
break;
case 69:return 72;
break;
case 70:return 74;
break;
case 71:return 21;
break;
case 72:return 35;
break;
case 73:return 18;
break;
case 74:return 80;
break;
case 75:return 75;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						 salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						 ArrayDeErrores.push({tipo:"léxico", linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:function\b)/i,/^(?:null\b)/i,/^(?:graficar_ts\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/i,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/i,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\`])*`)/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-=)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}