/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,18],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,21],$Vf=[2,5,9,15,17,22,24,26,28,31,32,33,38,46,47,82,91],$Vg=[21,41,42,43,44,45],$Vh=[2,139],$Vi=[1,34],$Vj=[1,33],$Vk=[1,39],$Vl=[1,52],$Vm=[2,128],$Vn=[1,42],$Vo=[1,37],$Vp=[1,38],$Vq=[1,40],$Vr=[1,41],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,49],$Vy=[1,51],$Vz=[1,71],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,82],$VF=[1,80],$VG=[1,81],$VH=[1,83],$VI=[1,85],$VJ=[1,86],$VK=[2,77],$VL=[12,15,21,35,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,78],$VM=[1,99],$VN=[1,98],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,106],$VV=[1,107],$VW=[1,108],$VX=[1,109],$VY=[1,110],$VZ=[1,111],$V_=[1,112],$V$=[12,15,21,35,49,50,51,52,53,54,55,56,57,58,59,60,61,62,74,75,78],$V01=[1,121],$V11=[1,128],$V21=[2,5,9,15,17,22,24,26,28,31,32,33,38,46,47,82,91,96,97],$V31=[2,9,15,17,22,24,26,28,31,32,38,46,47,82,96,97],$V41=[2,79],$V51=[1,160],$V61=[2,103],$V71=[1,186],$V81=[21,78],$V91=[2,86],$Va1=[1,193],$Vb1=[1,198],$Vc1=[1,195],$Vd1=[1,196],$Ve1=[1,197],$Vf1=[1,199],$Vg1=[1,206],$Vh1=[1,209],$Vi1=[1,204],$Vj1=[1,205],$Vk1=[1,207],$Vl1=[1,208],$Vm1=[1,210],$Vn1=[1,211],$Vo1=[1,212],$Vp1=[1,213],$Vq1=[12,15,21,35,49,50,55,56,57,58,59,60,61,62,74,75,78],$Vr1=[12,15,21,35,49,50,51,52,55,56,57,58,59,60,61,62,74,75,78],$Vs1=[12,15,21,35,55,56,57,58,59,60,61,62,74,75,78],$Vt1=[12,15,21,35,59,60,61,62,74,75,78],$Vu1=[2,84],$Vv1=[1,251],$Vw1=[12,13,15,21,41,78],$Vx1=[2,94],$Vy1=[1,254],$Vz1=[1,260],$VA1=[1,264],$VB1=[1,263],$VC1=[1,265],$VD1=[1,266],$VE1=[1,267],$VF1=[1,268],$VG1=[1,269],$VH1=[1,270],$VI1=[1,271],$VJ1=[1,272],$VK1=[1,273],$VL1=[1,274],$VM1=[1,275],$VN1=[1,276],$VO1=[1,278],$VP1=[1,277],$VQ1=[12,35,49,50,51,52,53,54,55,56,57,58,59,60,61,62,75,78],$VR1=[2,117],$VS1=[1,284],$VT1=[1,285],$VU1=[2,126],$VV1=[1,306],$VW1=[1,346],$VX1=[1,344],$VY1=[1,345],$VZ1=[10,13,26,49,63,64,65,66,67,68,69,70,72,76],$V_1=[2,112],$V$1=[1,371],$V02=[12,35,49,50,55,56,57,58,59,60,61,62,75,78],$V12=[12,35,49,50,51,52,55,56,57,58,59,60,61,62,75,78],$V22=[12,35,55,56,57,58,59,60,61,62,75,78],$V32=[12,35,59,60,61,62,75,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"impresion":20,"PUNTO_COMA":21,"R_SWITCH":22,"cases":23,"R_FOR":24,"for_init":25,"IDENTIFICADOR":26,"for_change":27,"R_LET":28,"R_OF":29,"R_IN":30,"R_WHILE":31,"R_DO":32,"R_FUNCTION":33,"parametros":34,"DOS_PUNTOS":35,"tipo":36,"argumentos":37,"R_RETURN":38,"retorno":39,"id":40,"IGUAL":41,"INCREMENTO":42,"DECREMENTO":43,"ASIGNACION_SUMA":44,"ASIGNACION_RESTA":45,"R_BREAK":46,"R_CONTINUE":47,"sentencia":48,"MENOS":49,"MAS":50,"MULTIPLICACION":51,"DIVISION":52,"POTENCIA":53,"MODULO":54,"MAYOR":55,"MENOR":56,"MAYOR_IGUAL":57,"MENOR_IGUAL":58,"IGUALDAD":59,"DISTINTO":60,"AND":61,"OR":62,"NOT":63,"ENTERO":64,"DECIMAL":65,"R_TRUE":66,"R_FALSE":67,"CADENA":68,"CADENA_CHARS":69,"CADENA_EJECUTABLE":70,"objeto":71,"ABRIR_CORCHETE":72,"arrays":73,"CERRAR_CORCHETE":74,"OPERADOR_TERNARIO":75,"R_NULL":76,"argumentos_P":77,"COMA":78,"definicion_tipo":79,"definicion":80,"listaID":81,"R_CONST":82,"R_NUMBER":83,"declarar_array":84,"R_STRING":85,"R_BOOLEAN":86,"R_VOID":87,"obj_atributos":88,"obj_atributos_pr":89,"arrays_pr":90,"R_TYPE":91,"type_atributos":92,"type_atributos_pr":93,"R_ELSE":94,"elseIf_P":95,"R_CASE":96,"R_DEFAULT":97,"parametros_pr":98,"array_position":99,"id_pr":100,"R_LENGTH":101,"R_CHARAT":102,"R_TOLOWERCASE":103,"R_TOUPPERCASE":104,"R_CONCAT":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",21:"PUNTO_COMA",22:"R_SWITCH",24:"R_FOR",26:"IDENTIFICADOR",28:"R_LET",29:"R_OF",30:"R_IN",31:"R_WHILE",32:"R_DO",33:"R_FUNCTION",35:"DOS_PUNTOS",38:"R_RETURN",41:"IGUAL",42:"INCREMENTO",43:"DECREMENTO",44:"ASIGNACION_SUMA",45:"ASIGNACION_RESTA",46:"R_BREAK",47:"R_CONTINUE",49:"MENOS",50:"MAS",51:"MULTIPLICACION",52:"DIVISION",53:"POTENCIA",54:"MODULO",55:"MAYOR",56:"MENOR",57:"MAYOR_IGUAL",58:"MENOR_IGUAL",59:"IGUALDAD",60:"DISTINTO",61:"AND",62:"OR",63:"NOT",64:"ENTERO",65:"DECIMAL",66:"R_TRUE",67:"R_FALSE",68:"CADENA",69:"CADENA_CHARS",70:"CADENA_EJECUTABLE",72:"ABRIR_CORCHETE",74:"CERRAR_CORCHETE",75:"OPERADOR_TERNARIO",76:"R_NULL",78:"COMA",82:"R_CONST",83:"R_NUMBER",85:"R_STRING",86:"R_BOOLEAN",87:"R_VOID",91:"R_TYPE",94:"R_ELSE",96:"R_CASE",97:"R_DEFAULT",101:"R_LENGTH",102:"R_CHARAT",103:"R_TOLOWERCASE",104:"R_TOUPPERCASE",105:"R_CONCAT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,10],[6,10],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,4],[6,4],[6,2],[6,2],[6,2],[14,2],[14,1],[48,1],[48,8],[48,7],[48,7],[48,11],[48,10],[48,10],[48,7],[48,9],[48,5],[48,3],[48,4],[48,3],[48,3],[48,4],[48,4],[48,2],[48,2],[48,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,5],[11,1],[37,2],[37,0],[77,3],[77,0],[7,6],[7,6],[7,2],[81,5],[81,0],[80,2],[80,0],[79,2],[36,2],[36,2],[36,2],[36,2],[36,1],[84,3],[84,0],[71,3],[71,2],[88,4],[89,2],[89,0],[73,2],[73,0],[90,3],[90,0],[8,7],[92,3],[93,2],[93,2],[93,1],[93,1],[93,0],[16,2],[16,0],[95,8],[95,3],[23,5],[23,3],[23,0],[25,6],[25,4],[27,1],[27,1],[27,2],[34,3],[34,0],[98,4],[98,0],[39,1],[39,0],[99,4],[99,0],[40,2],[100,4],[100,3],[100,2],[100,5],[100,4],[100,4],[100,5],[100,0],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,1],[20,1],[20,4],[20,1],[20,1],[20,1],[20,1],[20,1],[20,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal, ErrArr:tempAr};
	
break;
case 2: case 25:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 27: case 85: case 87: case 98: case 106: case 107: case 120: case 121: case 122: case 127:
this.$=$$[$0];
break;
case 6: case 28:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 29:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 30:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 31:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], {id:$$[$0-5], paso:$$[$0-4]}, $$[$0-1]);
break;
case 10: case 32:
this.$=instruccionesAPI.nuevoForOF($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 11: case 33:
this.$=instruccionesAPI.nuevoForIn($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 34:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 35:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 15: case 36:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 16: case 37:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 17: case 38: case 119:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 18:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 19:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 20: case 41:
this.$=instruccionesAPI.nuevoAsignacioSuma($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 21: case 42:
this.$=instruccionesAPI.nuevoAsignacioResta($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 22:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1]);
break;
case 23: case 44:
this.$=instruccionesAPI.nuevoBreak();
break;
case 24: case 45:
this.$=instruccionesAPI.nuevoContinue();
break;
case 26:
 this.$ = [$$[$0]]; 
break;
case 39:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 40:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 43:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 46: case 140:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 47: case 141:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 48: case 142:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 49: case 143:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 50: case 144:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 51: case 145:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 52: case 146:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 53: case 147:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 54: case 148:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 55: case 149:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 56: case 150:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 57: case 151:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 58: case 152:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 59: case 153:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 60: case 154:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 61: case 155:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 62: case 157:
 this.$ = $$[$0-1]; 
break;
case 63: case 158:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 64: case 159:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 65: case 160:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line); 
break;
case 66: case 161:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 67: case 162:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 68: case 163:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 69: case 164:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA_EJECUTABLE); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0], _$[$0].first_column, _$[$0].first_line); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line); 
break;
case 73: case 165:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 74: case 166:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 75:
this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.NULL);
break;
case 76:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 77:
this.$ = "Epsilon";
break;
case 78:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0] , _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 79:
this.$ =  "Epsilon";
break;
case 80: case 81:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 82:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  ArrayDeErrores.push({tipo:"sintáctico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yytext});
break;
case 83:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 84: case 96: case 99: case 101: case 103: case 108: case 109: case 110: case 117: case 124: case 126: case 128: case 139:
this.$="Epsilon";
break;
case 86:
this.$="undefined";
break;
case 88: case 89: case 90:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 91:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 92:
this.$=instruccionesAPI.nuevoTipo($$[$0], false);
break;
case 93:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 94:
this.$=false;
break;
case 95:
this.$=$$[$0-1];
break;
case 97:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 100: case 102:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 104:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 105:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 111:
 this.$ = $$[$0];
break;
case 112:
 this.$ = "Epsilon"; 
break;
case 113:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 114:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 115:
this.$=instruccionesAPI.nuevoCase($$[$0-3], $$[$0-1], $$[$0]);
break;
case 116:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 118:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1], "Epsilon", _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 123: case 125:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 129:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 130:
this.$="false";
break;
case 131:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 132:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 133:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 134:
this.$=instruccionesAPI.nuevoLength(_$[$0].first_column, _$[$0].first_line);
break;
case 135:
this.$=instruccionesAPI.nuevoCharAt($$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 136:
this.$=instruccionesAPI.nuevoToLowerCase(_$[$0-2].first_column, _$[$0-2].first_line);
break;
case 137:
this.$=instruccionesAPI.nuevoToUpperCase(_$[$0-2].first_column, _$[$0-2].first_line);
break;
case 138:
this.$=instruccionesAPI.nuevoConcat($$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 156:
this.$=instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.CONCATENACION);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,82:$Vd,91:$Ve},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,82:$Vd,91:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,24]},{18:[1,25]},{10:[1,26]},{10:[1,27]},{10:[1,28]},{13:[1,29]},{26:[1,30]},o($Vg,$Vh,{100:32,10:[1,31],18:$Vi,72:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,39:35,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{21:[1,58],41:[1,53],42:[1,54],43:[1,55],44:[1,56],45:[1,57]},{21:[1,59]},{21:[1,60]},{26:[1,61]},{26:[1,62]},{21:[1,63]},{26:[1,64]},{1:[2,1]},o($Vf,[2,2]),{10:$Vk,11:65,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{19:[1,66]},{10:$Vk,11:67,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{25:68,26:$Vz,28:[1,69],40:70},{10:$Vk,11:72,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{2:$V0,7:75,9:$VA,14:73,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{10:[1,87]},{10:$Vk,11:89,12:$VK,13:$Vl,26:$Vn,37:88,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($VL,[2,131]),{10:$Vk,11:90,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{26:[1,91],101:[1,92],102:[1,93],103:[1,94],104:[1,95],105:[1,96]},{21:[1,97]},{21:[2,127],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:113,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:114,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:115,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($V$,[2,63]),o($V$,[2,64]),o($V$,$Vh,{100:32,10:[1,116],18:$Vi,72:$Vj}),o($V$,[2,66]),o($V$,[2,67]),o($V$,[2,68]),o($V$,[2,69]),o($V$,[2,70]),o($V$,[2,71]),{10:$Vk,11:118,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,73:117,74:[2,101],76:$Vy},o($V$,[2,73]),o($V$,[2,75]),{15:[1,120],26:$V01,88:119},{10:$Vk,11:122,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{21:[1,123]},{21:[1,124]},{10:$Vk,11:125,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:126,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),{35:$V11,79:127},{35:$V11,79:129},o($V21,[2,82]),{41:[1,130]},{12:[1,131],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:[1,132]},{12:[1,133],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:134,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{26:[1,135]},{41:[1,136]},{18:$Vi,41:$Vh,72:$Vj,100:32},{12:[1,137],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,15:[1,138],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($V31,[2,26]),o($V31,[2,27]),{10:[1,140]},{18:[1,141]},{10:[1,142]},{10:[1,143]},{10:[1,144]},{13:[1,145]},o($Vg,$Vh,{100:32,10:[1,146],18:$Vi,72:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,39:147,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{21:[1,153],41:[1,148],42:[1,149],43:[1,150],44:[1,151],45:[1,152]},{21:[1,154]},{21:[1,155]},{12:[2,124],26:[1,157],34:156},{12:[1,158]},{12:$V41,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_,77:159,78:$V51},{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,74:[1,161],75:$V_},o($VL,$Vh,{100:162,18:$Vi,72:$Vj}),o($VL,[2,134]),{10:[1,163]},{10:[1,164]},{10:[1,165]},{10:[1,166]},o($Vf,[2,16]),{10:$Vk,11:167,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:168,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:169,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:170,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:171,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:172,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:173,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:174,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:175,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:176,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:177,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:178,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:179,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:180,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:181,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($V$,[2,46]),o($V$,[2,61]),{12:[1,182],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:89,12:$VK,13:$Vl,26:$Vn,37:183,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{74:[1,184]},{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,74:$V61,75:$V_,78:$V71,90:185},{15:[1,187]},o($V$,[2,96]),{35:[1,188]},{21:[1,189],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($Vf,[2,18]),o($Vf,[2,19]),{21:[1,190],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{21:[1,191],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($V81,$V91,{80:192,41:$Va1}),{26:$Vb1,36:194,83:$Vc1,85:$Vd1,86:$Ve1,87:$Vf1},o($V81,$V91,{80:200,41:$Va1}),{13:[1,201]},{13:[1,202]},{10:$Vg1,20:203,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{13:[1,215]},{21:[1,216],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{29:[1,217],30:[1,218],35:$V11,79:219},{10:$Vk,11:220,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{13:[1,221]},{31:[1,222]},o($V31,[2,25]),{10:$Vk,11:223,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{19:[1,224]},{10:$Vk,11:225,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{25:226,26:$Vz,28:[1,227],40:70},{10:$Vk,11:228,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{2:$V0,7:75,9:$VA,14:229,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{10:$Vk,11:89,12:$VK,13:$Vl,26:$Vn,37:230,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{21:[1,231]},{10:$Vk,11:232,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{21:[1,233]},{21:[1,234]},{10:$Vk,11:235,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:236,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($V31,[2,43]),o($V31,[2,44]),o($V31,[2,45]),{12:[1,237]},{35:$V11,79:238},{21:[1,239]},{12:[2,76]},{10:$Vk,11:240,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($VL,$Vh,{100:241,18:$Vi,72:$Vj}),o($VL,[2,133]),{10:$Vk,11:242,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{12:[1,243]},{12:[1,244]},{10:$Vk,11:245,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($Vq1,[2,47],{51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vq1,[2,48],{51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vr1,[2,49],{53:$VQ,54:$VR}),o($Vr1,[2,50],{53:$VQ,54:$VR}),o($V$,[2,51]),o($V$,[2,52]),o($Vs1,[2,53],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vs1,[2,54],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vs1,[2,55],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vs1,[2,56],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vt1,[2,57],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV}),o($Vt1,[2,58],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV}),o([12,15,21,35,61,62,74,75,78],[2,59],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([12,15,21,35,62,74,75,78],[2,60],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY}),{35:[1,246],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($V$,[2,62]),{12:[1,247]},o($V$,[2,72]),{74:[2,100]},{10:$Vk,11:248,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($V$,[2,95]),{10:$Vk,11:249,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($Vf,[2,17]),o($Vf,[2,20]),o($Vf,[2,21]),{21:$Vu1,78:$Vv1,81:250},{10:$Vk,11:252,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o([12,15,21,41,78],[2,87]),o($Vw1,$Vx1,{84:253,72:$Vy1}),o($Vw1,$Vx1,{84:255,72:$Vy1}),o($Vw1,$Vx1,{84:256,72:$Vy1}),o($Vw1,$Vx1,{84:257,72:$Vy1}),o($Vw1,[2,92]),{21:$Vu1,78:$Vv1,81:258},{26:$Vz1,92:259},{2:$V0,7:75,9:$VA,14:261,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{12:[1,262],49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1,62:$VN1,75:$VO1,78:$VP1},{10:$Vg1,20:279,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:280,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:281,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},o($VQ1,[2,158]),o($VQ1,[2,159]),o($VQ1,$Vh,{100:32,10:[1,282],18:$Vi,72:$Vj}),o($VQ1,[2,161]),o($VQ1,[2,162]),o($VQ1,[2,163]),o($VQ1,[2,164]),o($VQ1,[2,165]),{15:$VR1,23:283,96:$VS1,97:$VT1},{26:[1,286]},{10:$Vk,11:287,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:288,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{41:[1,289]},{21:[1,290],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,14:291,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{10:[1,292]},{12:[1,293],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:[1,294]},{12:[1,295],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:296,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{26:[1,297]},{12:[1,298],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,15:[1,299],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{12:[1,300]},o($V31,[2,37]),{21:[1,301],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($V31,[2,39]),o($V31,[2,40]),{21:[1,302],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{21:[1,303],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{35:[1,304]},{12:$VU1,78:$VV1,98:305},o($Vf,[2,15]),{12:$V41,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_,77:307,78:$V51},o($VL,[2,132]),{12:[1,308],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($VL,[2,136]),o($VL,[2,137]),{12:[1,309],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:310,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($V$,[2,65]),{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,74:$V61,75:$V_,78:$V71,90:311},{15:[2,99],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_,78:[1,313],89:312},{21:[1,314]},{26:[1,315]},o($V81,[2,85],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_}),o($Vw1,[2,88]),{74:[1,316]},o($Vw1,[2,89]),o($Vw1,[2,90]),o($Vw1,[2,91]),{21:[1,317]},{15:[1,318]},{35:$V11,79:319},{2:$V0,7:75,9:$VA,15:[1,320],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{21:[1,321]},{10:$Vg1,20:322,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:323,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:324,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:325,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:326,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:327,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:328,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:329,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:330,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:331,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:332,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:333,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:334,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:335,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:336,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},{10:$Vg1,20:337,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},o($VQ1,[2,140]),o($VQ1,[2,155]),{12:[1,338],49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1,62:$VN1,75:$VO1,78:$VP1},{10:$Vk,11:89,12:$VK,13:$Vl,26:$Vn,37:339,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{15:[1,340]},{10:$Vk,11:341,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{35:[1,342]},{27:343,41:$VW1,42:$VX1,43:$VY1},{12:[1,347],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{12:[1,348],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{10:$Vk,11:349,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},o($VZ1,[2,119]),{2:$V0,7:75,9:$VA,15:[1,350],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{10:$Vk,11:351,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{13:[1,352]},{10:$Vk,11:353,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{13:[1,354]},{21:[1,355],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{29:[1,356],30:[1,357],35:$V11,79:219},{13:[1,358]},{31:[1,359]},{21:[1,360]},o($V31,[2,38]),o($V31,[2,41]),o($V31,[2,42]),{26:$Vb1,36:361,83:$Vc1,85:$Vd1,86:$Ve1,87:$Vf1},{12:[2,123]},{26:[1,362]},{12:[2,78]},o($VL,[2,135]),o($VL,[2,138]),o([12,15,21,35,74,75,78],[2,74],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),{74:[2,102]},{15:[2,97]},{26:$V01,88:363},o($V21,[2,80]),{35:$V11,79:364},o($Vw1,$Vx1,{84:365,72:$Vy1}),o($V21,[2,81]),{21:[1,366]},{15:[2,110],21:[1,369],78:[1,368],93:367},o($Vf,$V_1,{16:370,94:$V$1}),o($Vf,[2,7]),o($V02,[2,141],{51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V02,[2,142],{51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V12,[2,143],{53:$VE1,54:$VF1}),o($V12,[2,144],{53:$VE1,54:$VF1}),o($VQ1,[2,145]),o($VQ1,[2,146]),o($V22,[2,147],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V22,[2,148],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V22,[2,149],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V22,[2,150],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1}),o($V32,[2,151],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1}),o($V32,[2,152],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1}),o([12,35,61,62,75,78],[2,153],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1}),o([12,35,62,75,78],[2,154],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1}),o([12,35,78],[2,156],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1,62:$VN1,75:$VO1}),{35:[1,372],49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1,62:$VN1,75:$VO1,78:$VP1},o($VQ1,[2,157]),{12:[1,373]},o($Vf,[2,8]),{35:[1,374],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,14:375,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{12:[1,376]},{12:[2,120]},{12:[2,121]},{10:$Vk,11:377,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{13:[1,378]},{13:[1,379]},{21:[1,380],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($Vf,[2,12]),{12:[1,381],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,14:382,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{12:[1,383],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{15:$VR1,23:384,96:$VS1,97:$VT1},{26:[1,385]},{10:$Vk,11:386,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{10:$Vk,11:387,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{2:$V0,7:75,9:$VA,14:388,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{10:[1,389]},o($V31,[2,36]),{13:[1,390]},{35:$V11,79:391},{15:[2,98]},o($V81,$V91,{80:392,41:$Va1}),o($Vw1,[2,93]),o($Vf,[2,104]),{15:[2,105]},{15:[2,108],26:$Vz1,92:393},{15:[2,109],26:$Vz1,92:394},o($Vf,[2,6]),{9:[1,396],13:[1,397],95:395},{10:$Vg1,20:398,26:$Vh1,40:214,49:$Vi1,63:$Vj1,64:$Vk1,65:$Vl1,66:$Vm1,67:$Vn1,68:$Vo1,69:$Vp1},o($VQ1,[2,160]),{2:$V0,7:75,9:$VA,14:399,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{2:$V0,7:75,9:$VA,15:[2,116],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{13:[1,400]},{12:[2,122],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,14:401,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{2:$V0,7:75,9:$VA,14:402,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},o($VZ1,[2,118]),{21:[1,403]},{2:$V0,7:75,9:$VA,15:[1,404],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{21:[1,405]},{15:[1,406]},{27:407,41:$VW1,42:$VX1,43:$VY1},{12:[1,408],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{12:[1,409],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,7:75,9:$VA,15:[1,410],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{10:$Vk,11:411,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{2:$V0,4:412,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,82:$Vd,91:$Ve},{12:$VU1,78:$VV1,98:413},{21:$Vu1,78:$Vv1,81:414},{15:[2,106]},{15:[2,107]},o($V21,[2,111]),{10:[1,415]},{2:$V0,7:75,9:$VA,14:416,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},o([12,35,75,78],[2,166],{49:$VA1,50:$VB1,51:$VC1,52:$VD1,53:$VE1,54:$VF1,55:$VG1,56:$VH1,57:$VI1,58:$VJ1,59:$VK1,60:$VL1,61:$VM1,62:$VN1}),{2:$V0,7:75,9:$VA,15:$VR1,17:$VB,22:$VC,23:417,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd,96:$VS1,97:$VT1},{2:$V0,7:75,9:$VA,14:418,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{2:$V0,7:75,9:$VA,15:[1,419],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{2:$V0,7:75,9:$VA,15:[1,420],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($Vf,[2,13]),o($V31,$V_1,{16:421,94:$V$1}),o($V31,[2,29]),o($V31,[2,30]),{12:[1,422]},{13:[1,423]},{13:[1,424]},o($V31,[2,34]),{12:[1,425],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},{2:$V0,6:23,7:4,8:5,9:$V1,15:[1,426],17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,31:$V7,32:$V8,33:$V9,38:$Va,40:15,46:$Vb,47:$Vc,82:$Vd,91:$Ve},{12:[2,125]},{21:[2,83]},{10:$Vk,11:427,13:$Vl,26:$Vn,40:50,49:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:48,72:$Vx,76:$Vy},{2:$V0,7:75,9:$VA,15:[1,428],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{15:[2,115]},{2:$V0,7:75,9:$VA,15:[1,429],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($Vf,[2,10]),o($Vf,[2,11]),o($V31,[2,28]),{13:[1,430]},{2:$V0,7:75,9:$VA,14:431,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{2:$V0,7:75,9:$VA,14:432,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{21:[1,433]},o($Vf,[2,14]),{12:[1,434],49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,75:$V_},o($V21,[2,114]),o($Vf,[2,9]),{2:$V0,7:75,9:$VA,14:435,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},{2:$V0,7:75,9:$VA,15:[1,436],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},{2:$V0,7:75,9:$VA,15:[1,437],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($V31,[2,35]),{13:[1,438]},{2:$V0,7:75,9:$VA,15:[1,439],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($V31,[2,32]),o($V31,[2,33]),{2:$V0,7:75,9:$VA,14:440,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:74,82:$Vd},o($V31,[2,31]),{2:$V0,7:75,9:$VA,15:[1,441],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,31:$VF,32:$VG,38:$VH,40:84,46:$VI,47:$VJ,48:139,82:$Vd},o($V21,$V_1,{16:442,94:$V$1}),o($V21,[2,113])],
defaultActions: {22:[2,1],159:[2,76],185:[2,100],305:[2,123],307:[2,78],311:[2,102],312:[2,97],344:[2,120],345:[2,121],363:[2,98],367:[2,105],393:[2,106],394:[2,107],413:[2,125],414:[2,83],417:[2,115]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 83;
break;
case 1:return 86;
break;
case 2:return 85;
break;
case 3:return 28;
break;
case 4:return 82;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 67;
break;
case 8:return 66;
break;
case 9:return 9;
break;
case 10:return 94;
break;
case 11:return 22;
break;
case 12:return 96;
break;
case 13:return 97;
break;
case 14:return 46;
break;
case 15:return 47;
break;
case 16:return 31;
break;
case 17:return 32;
break;
case 18:return 24;
break;
case 19:return 87;
break;
case 20:return 38;
break;
case 21:return 'R_PUSH';
break;
case 22:return 'R_POP';
break;
case 23:return 101;
break;
case 24:return 91;
break;
case 25:return 29;
break;
case 26:return 30;
break;
case 27:return 33 ;
break;
case 28:return 76;
break;
case 29:return 'R_GRAFICAR_TS';
break;
case 30:return 102;
break;
case 31:return 103;
break;
case 32:return 104;
break;
case 33:return 105;
break;
case 34:return 'R_NEW';
break;
case 35:return 'R_ARRAY';
break;
case 36: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 68;
break;
case 37: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69;
break;
case 38: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70;
break;
case 39:return 65;
break;
case 40:return 64;
break;
case 41:return 26;
break;
case 42:
break;
case 43:return 'COMENTARIO_LINEAL'; // comentario simple línea
break;
case 44:return 'COMENTARIO_BLOQUE'// comentario multiple líneas
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 44;
break;
case 48:return 50;
break;
case 49:return 45;
break;
case 50:return 49;
break;
case 51:return 53;
break;
case 52:return 51;
break;
case 53:return 52;
break;
case 54:return 54;
break;
case 55:return 59;
break;
case 56:return 60;
break;
case 57:return 41;
break;
case 58:return 57;
break;
case 59:return 55;
break;
case 60:return 58;
break;
case 61:return 56;
break;
case 62:return 61;
break;
case 63:return 62;
break;
case 64:return 63;
break;
case 65:return 13;
break;
case 66:return 15;
break;
case 67:return 10;
break;
case 68:return 12;
break;
case 69:return 72;
break;
case 70:return 74;
break;
case 71:return 21;
break;
case 72:return 35;
break;
case 73:return 18;
break;
case 74:return 78;
break;
case 75:return 75;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						 salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						 ArrayDeErrores.push({tipo:"léxico", linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:function\b)/i,/^(?:null\b)/i,/^(?:graficar_ts\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/i,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/i,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\`])*`)/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-=)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}