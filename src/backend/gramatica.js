/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,13],$V6=[1,18],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,14],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,21],$Vf=[2,5,9,15,17,22,24,26,28,32,33,34,39,45,46,82,91],$Vg=[21,42,43,44],$Vh=[2,135],$Vi=[1,34],$Vj=[1,33],$Vk=[1,39],$Vl=[1,52],$Vm=[2,124],$Vn=[1,42],$Vo=[1,37],$Vp=[1,38],$Vq=[1,40],$Vr=[1,41],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,48],$Vx=[1,50],$Vy=[1,51],$Vz=[1,69],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,80],$VF=[1,78],$VG=[1,79],$VH=[1,81],$VI=[1,83],$VJ=[1,84],$VK=[2,73],$VL=[12,15,21,36,42,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,74,79],$VM=[1,97],$VN=[1,96],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[1,104],$VV=[1,105],$VW=[1,106],$VX=[1,107],$VY=[1,108],$VZ=[1,109],$V_=[1,110],$V$=[12,15,21,36,48,49,50,51,52,53,54,55,56,57,58,59,60,61,73,74,79],$V01=[2,141],$V11=[1,116],$V21=[1,123],$V31=[1,128],$V41=[2,5,9,15,17,22,24,26,28,32,33,34,39,45,46,82,91,96,97],$V51=[2,9,15,17,22,24,26,28,32,33,39,45,46,82,96,97],$V61=[2,75],$V71=[1,158],$V81=[2,99],$V91=[1,189],$Va1=[21,79],$Vb1=[2,82],$Vc1=[1,195],$Vd1=[1,200],$Ve1=[1,197],$Vf1=[1,198],$Vg1=[1,199],$Vh1=[1,201],$Vi1=[1,208],$Vj1=[1,211],$Vk1=[1,206],$Vl1=[1,207],$Vm1=[1,209],$Vn1=[1,210],$Vo1=[1,212],$Vp1=[1,213],$Vq1=[1,214],$Vr1=[1,215],$Vs1=[1,217],$Vt1=[12,15,21,36,48,49,54,55,56,57,58,59,60,61,73,74,79],$Vu1=[12,15,21,36,48,49,50,51,54,55,56,57,58,59,60,61,73,74,79],$Vv1=[12,15,21,36,54,55,56,57,58,59,60,61,73,74,79],$Vw1=[12,15,21,36,58,59,60,61,73,74,79],$Vx1=[2,80],$Vy1=[1,255],$Vz1=[12,13,15,21,30,31,42,79],$VA1=[2,90],$VB1=[1,258],$VC1=[1,264],$VD1=[1,268],$VE1=[1,267],$VF1=[1,269],$VG1=[1,270],$VH1=[1,271],$VI1=[1,272],$VJ1=[1,273],$VK1=[1,274],$VL1=[1,275],$VM1=[1,276],$VN1=[1,277],$VO1=[1,278],$VP1=[1,279],$VQ1=[1,280],$VR1=[1,282],$VS1=[1,281],$VT1=[12,36,48,49,50,51,52,53,54,55,56,57,58,59,60,61,74,79],$VU1=[2,113],$VV1=[1,290],$VW1=[1,291],$VX1=[1,295],$VY1=[2,122],$VZ1=[1,310],$V_1=[1,357],$V$1=[1,355],$V02=[1,356],$V12=[10,13,26,48,62,63,64,65,66,67,69,71,75,76],$V22=[2,108],$V32=[1,387],$V42=[12,36,48,49,54,55,56,57,58,59,60,61,74,79],$V52=[12,36,48,49,50,51,54,55,56,57,58,59,60,61,74,79],$V62=[12,36,54,55,56,57,58,59,60,61,74,79],$V72=[12,36,58,59,60,61,74,79];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"type":8,"R_IF":9,"ABRIR_PARENTESIS":10,"expresion":11,"CERRAR_PARENTESIS":12,"ABRIR_LLAVE":13,"sentencias":14,"CERRAR_LLAVE":15,"elseIf":16,"R_CONSOLE":17,"PUNTO":18,"R_LOG":19,"impresion":20,"PUNTO_COMA":21,"R_SWITCH":22,"cases":23,"R_FOR":24,"for_init":25,"IDENTIFICADOR":26,"for_change":27,"R_LET":28,"definicion_tipo":29,"R_OF":30,"R_IN":31,"R_WHILE":32,"R_DO":33,"R_FUNCTION":34,"parametros":35,"DOS_PUNTOS":36,"tipo":37,"argumentos":38,"R_RETURN":39,"retorno":40,"id":41,"IGUAL":42,"INCREMENTO":43,"DECREMENTO":44,"R_BREAK":45,"R_CONTINUE":46,"sentencia":47,"MENOS":48,"MAS":49,"MULTIPLICACION":50,"DIVISION":51,"POTENCIA":52,"MODULO":53,"MAYOR":54,"MENOR":55,"MAYOR_IGUAL":56,"MENOR_IGUAL":57,"IGUALDAD":58,"DISTINTO":59,"AND":60,"OR":61,"NOT":62,"ENTERO":63,"DECIMAL":64,"R_TRUE":65,"R_FALSE":66,"CADENA":67,"str_method":68,"CADENA_CHARS":69,"objeto":70,"ABRIR_CORCHETE":71,"arrays":72,"CERRAR_CORCHETE":73,"OPERADOR_TERNARIO":74,"R_NULL":75,"R_NEW":76,"R_ARRAY":77,"argumentos_P":78,"COMA":79,"definicion":80,"listaID":81,"R_CONST":82,"R_NUMBER":83,"declarar_array":84,"R_STRING":85,"R_BOOLEAN":86,"R_VOID":87,"obj_atributos":88,"obj_atributos_pr":89,"arrays_pr":90,"R_TYPE":91,"type_atributos":92,"type_atributos_pr":93,"R_ELSE":94,"elseIf_P":95,"R_CASE":96,"R_DEFAULT":97,"parametros_pr":98,"array_position":99,"id_pr":100,"R_LENGTH":101,"R_CHARAT":102,"R_TOLOWERCASE":103,"R_TOUPPERCASE":104,"R_CONCAT":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_IF",10:"ABRIR_PARENTESIS",12:"CERRAR_PARENTESIS",13:"ABRIR_LLAVE",15:"CERRAR_LLAVE",17:"R_CONSOLE",18:"PUNTO",19:"R_LOG",21:"PUNTO_COMA",22:"R_SWITCH",24:"R_FOR",26:"IDENTIFICADOR",28:"R_LET",30:"R_OF",31:"R_IN",32:"R_WHILE",33:"R_DO",34:"R_FUNCTION",36:"DOS_PUNTOS",39:"R_RETURN",42:"IGUAL",43:"INCREMENTO",44:"DECREMENTO",45:"R_BREAK",46:"R_CONTINUE",48:"MENOS",49:"MAS",50:"MULTIPLICACION",51:"DIVISION",52:"POTENCIA",53:"MODULO",54:"MAYOR",55:"MENOR",56:"MAYOR_IGUAL",57:"MENOR_IGUAL",58:"IGUALDAD",59:"DISTINTO",60:"AND",61:"OR",62:"NOT",63:"ENTERO",64:"DECIMAL",65:"R_TRUE",66:"R_FALSE",67:"CADENA",69:"CADENA_CHARS",71:"ABRIR_CORCHETE",73:"CERRAR_CORCHETE",74:"OPERADOR_TERNARIO",75:"R_NULL",76:"R_NEW",77:"R_ARRAY",79:"COMA",82:"R_CONST",83:"R_NUMBER",85:"R_STRING",86:"R_BOOLEAN",87:"R_VOID",91:"R_TYPE",94:"R_ELSE",96:"R_CASE",97:"R_DEFAULT",101:"R_LENGTH",102:"R_CHARAT",103:"R_TOLOWERCASE",104:"R_TOUPPERCASE",105:"R_CONCAT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,8],[6,7],[6,7],[6,11],[6,11],[6,11],[6,7],[6,9],[6,10],[6,5],[6,3],[6,4],[6,3],[6,3],[6,2],[6,2],[6,2],[14,2],[14,1],[47,1],[47,8],[47,7],[47,7],[47,11],[47,11],[47,11],[47,7],[47,9],[47,5],[47,3],[47,4],[47,3],[47,3],[47,2],[47,2],[47,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,4],[11,1],[11,1],[11,2],[11,2],[11,1],[11,3],[11,1],[11,5],[11,1],[11,5],[38,2],[38,0],[78,3],[78,0],[7,6],[7,6],[7,2],[81,5],[81,0],[80,2],[80,0],[29,2],[37,2],[37,2],[37,2],[37,2],[37,1],[84,3],[84,0],[70,3],[70,2],[88,4],[89,2],[89,0],[72,2],[72,0],[90,3],[90,0],[8,7],[92,3],[93,2],[93,2],[93,1],[93,1],[93,0],[16,2],[16,0],[95,8],[95,3],[23,5],[23,3],[23,0],[25,6],[25,4],[27,1],[27,1],[27,2],[35,3],[35,0],[98,4],[98,0],[40,1],[40,0],[99,4],[99,0],[41,2],[100,4],[100,3],[100,2],[100,6],[100,5],[100,5],[100,6],[100,0],[68,6],[68,5],[68,5],[68,6],[68,2],[68,0],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,1],[20,1],[20,4],[20,1],[20,1],[20,2],[20,2],[20,1],[20,1],[20,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		var tempAr = ArrayDeErrores;
		ArrayDeErrores = [];
		return {AST: $$[$0-1], Errores: temporal, ErrArr:tempAr};
	
break;
case 2: case 23:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 25: case 81: case 83: case 94: case 102: case 103: case 116: case 117: case 118: case 123:
this.$=$$[$0];
break;
case 6: case 26:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 7: case 27:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 8: case 28:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1]);
break;
case 9: case 29:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], {id:$$[$0-5], paso:$$[$0-4]}, $$[$0-1]);
break;
case 10: case 30:
this.$=instruccionesAPI.nuevoForOF($$[$0-7],$$[$0-6],  $$[$0-4], $$[$0-1]);
break;
case 11: case 31:
this.$=instruccionesAPI.nuevoForIn($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12: case 32:
this.$=instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 13: case 33:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 14:
  this.$ = instruccionesAPI.nuevaFuncion($$[$0-3], $$[$0-8], $$[$0-6], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 15: case 34:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 16: case 35:
this.$=instruccionesAPI.nuevoReturn($$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 17: case 36: case 115:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 18:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 19:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 20:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1]);
break;
case 21: case 40:
this.$=instruccionesAPI.nuevoBreak(_$[$0-1].first_column, _$[$0-1].first_line);
break;
case 22: case 41:
this.$=instruccionesAPI.nuevoContinue(_$[$0-1].first_column, _$[$0-1].first_line);
break;
case 24:
 this.$ = [$$[$0]]; 
break;
case 37:
this.$=instruccionesAPI.nuevoIncremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 38:
this.$=instruccionesAPI.nuevoDecremento($$[$0-2], $$[$0-1], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 39:
this.$=instruccionesAPI.nuevoAcceso($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 42: case 142:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 43: case 143:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 44: case 144:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 45: case 145:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 46: case 146:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 47: case 147:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 48: case 148:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 49: case 149:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 50: case 150:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 51: case 151:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 52: case 152:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 53: case 153:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 54: case 154:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 55: case 155:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 56: case 156:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 57: case 157:
this.$ =  instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT);
break;
case 58: case 159:
 this.$ = $$[$0-1]; 
break;
case 59: case 160:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 60: case 161:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL); 
break;
case 61: case 162:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1], _$[$0-3].first_column, _$[$0-3].first_line); 
break;
case 62: case 163:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 63: case 164:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 64: case 165:
 this.$ = instruccionesAPI.nuevoStr($$[$0-1],$$[$0], TIPO_VALOR.CADENA); 
break;
case 65: case 166:
 this.$ = instruccionesAPI.nuevoStr($$[$0-1], $$[$0], TIPO_VALOR.CADENA_CHARS); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoObjeto($$[$0], _$[$0].first_column, _$[$0].first_line); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoArray($$[$0-1], _$[$0-1].first_column, _$[$0-1].first_line); 
break;
case 68: case 167:
this.$=instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR);
break;
case 69: case 169:
this.$=instruccionesAPI.nuevoOperadorTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 70: case 168:
this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.NULL);
break;
case 71:
this.$=instruccionesAPI.nuevoNewArray($$[$0-1]);
break;
case 72:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 73:
this.$ = "Epsilon";
break;
case 74:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0] , _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 75:
this.$ =  "Epsilon";
break;
case 76: case 77:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 78:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
						  ArrayDeErrores.push({tipo:"sintáctico", linea:this._$.first_line, columna:this._$.first_column, descripcion: yytext});
break;
case 79:
this.$=instruccionesAPI.nuevoID($$[$0-3],$$[$0-2], $$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 80: case 92: case 95: case 97: case 99: case 104: case 105: case 106: case 113: case 120: case 122: case 124: case 135: case 141:
this.$="Epsilon";
break;
case 82:
this.$="undefined";
break;
case 84: case 85: case 86:
 this.$=instruccionesAPI.nuevoTipo($$[$0-1],$$[$0]); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoTipo($$[$0-1], $$[$0]);
break;
case 88:
this.$=instruccionesAPI.nuevoTipo($$[$0], false);
break;
case 89:
this.$=instruccionesAPI.nuevaDimension($$[$0]);
break;
case 90:
this.$=false;
break;
case 91:
this.$=$$[$0-1];
break;
case 93:
this.$=instruccionesAPI.nuevoObjAtributo($$[$0-3], $$[$0-1], $$[$0]);
break;
case 96: case 98:
this.$=instruccionesAPI.nuevoDato($$[$0-1], $$[$0]);
break;
case 100:
this.$=instruccionesAPI.nuevoType($$[$0-5],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 101:
this.$=instruccionesAPI.nuevoTypeAtributo($$[$0-2], $$[$0-1], $$[$0]);
break;
case 107:
 this.$ = $$[$0];
break;
case 108:
 this.$ = "Epsilon"; 
break;
case 109:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 110:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 111:
this.$=instruccionesAPI.nuevoCase($$[$0-3], $$[$0-1], $$[$0]);
break;
case 112:
this.$=instruccionesAPI.nuevoDefault($$[$0]);
break;
case 114:
this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1], "Epsilon", _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 119: case 121:
this.$=instruccionesAPI.nuevoParametro($$[$0-1], $$[$0-2], $$[$0]);
break;
case 125:
this.$=instruccionesAPI.nuevoArrayIndex($$[$0-2], $$[$0]);
break;
case 126:
this.$="false";
break;
case 127:
this.$=instruccionesAPI.nuevaReferencia($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 128:
this.$=instruccionesAPI.nuevoAccPosicion($$[$0-2], $$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 129:
this.$=instruccionesAPI.nuevoAccAtributo($$[$0-1], $$[$0], _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 130: case 140:
this.$=instruccionesAPI.nuevoLength(_$[$0].first_column, _$[$0].first_line);
break;
case 131: case 136:
this.$=instruccionesAPI.nuevoCharAt($$[$0-2], $$[$0], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 132: case 137:
this.$=instruccionesAPI.nuevoToLowerCase($$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 133: case 138:
this.$=instruccionesAPI.nuevoToUpperCase($$[$0], _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 134: case 139:
this.$=instruccionesAPI.nuevoConcat($$[$0-2],$$[$0], _$[$0-4].first_column, _$[$0-4].first_line);
break;
case 158:
this.$=instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.CONCATENACION);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,32:$V7,33:$V8,34:$V9,39:$Va,41:15,45:$Vb,46:$Vc,82:$Vd,91:$Ve},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,32:$V7,33:$V8,34:$V9,39:$Va,41:15,45:$Vb,46:$Vc,82:$Vd,91:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,24]},{18:[1,25]},{10:[1,26]},{10:[1,27]},{10:[1,28]},{13:[1,29]},{26:[1,30]},o($Vg,$Vh,{100:32,10:[1,31],18:$Vi,71:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,40:35,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{21:[1,56],42:[1,53],43:[1,54],44:[1,55]},{21:[1,57]},{21:[1,58]},{26:[1,59]},{26:[1,60]},{21:[1,61]},{26:[1,62]},{1:[2,1]},o($Vf,[2,2]),{10:$Vk,11:63,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{19:[1,64]},{10:$Vk,11:65,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{25:66,26:$Vz,28:[1,67],41:68},{10:$Vk,11:70,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{2:$V0,7:73,9:$VA,14:71,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{10:[1,85]},{10:$Vk,11:87,12:$VK,13:$Vl,26:$Vn,38:86,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($VL,[2,127]),{10:$Vk,11:88,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{26:[1,89],101:[1,90],102:[1,91],103:[1,92],104:[1,93],105:[1,94]},{21:[1,95]},{21:[2,123],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:$Vk,11:111,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:112,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:113,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V$,[2,59]),o($V$,[2,60]),o($V$,$Vh,{100:32,10:[1,114],18:$Vi,71:$Vj}),o($V$,[2,62]),o($V$,[2,63]),o($V$,$V01,{68:115,18:$V11}),o($V$,$V01,{68:117,18:$V11}),o($V$,[2,66]),{10:$Vk,11:119,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,72:118,73:[2,97],75:$Vx,76:$Vy},o($V$,[2,68]),o($V$,[2,70]),{77:[1,120]},{15:[1,122],26:$V21,88:121},{10:$Vk,11:124,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{21:[1,125]},{21:[1,126]},o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{29:127,36:$V31},{29:129,36:$V31},o($V41,[2,78]),{42:[1,130]},{12:[1,131],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:[1,132]},{12:[1,133],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:$Vk,11:134,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{26:[1,135]},{42:[1,136]},{18:$Vi,42:$Vh,71:$Vj,100:32},{12:[1,137],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,7:73,9:$VA,15:[1,138],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},o($V51,[2,24]),o($V51,[2,25]),{10:[1,140]},{18:[1,141]},{10:[1,142]},{10:[1,143]},{10:[1,144]},{13:[1,145]},o($Vg,$Vh,{100:32,10:[1,146],18:$Vi,71:$Vj}),{10:$Vk,11:36,13:$Vl,21:$Vm,26:$Vn,40:147,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{21:[1,151],42:[1,148],43:[1,149],44:[1,150]},{21:[1,152]},{21:[1,153]},{12:[2,120],26:[1,155],35:154},{12:[1,156]},{12:$V61,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_,78:157,79:$V71},{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,73:[1,159],74:$V_},o($VL,$Vh,{100:160,18:$Vi,71:$Vj}),o($VL,[2,130]),{10:[1,161]},{10:[1,162]},{10:[1,163]},{10:[1,164]},o($Vf,[2,16]),{10:$Vk,11:165,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:166,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:167,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:168,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:169,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:170,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:171,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:172,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:173,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:174,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:175,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:176,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:177,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:178,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:179,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V$,[2,42]),o($V$,[2,57]),{12:[1,180],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:$Vk,11:87,12:$VK,13:$Vl,26:$Vn,38:181,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V$,[2,64]),{101:[1,186],102:[1,182],103:[1,183],104:[1,184],105:[1,185]},o($V$,[2,65]),{73:[1,187]},{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,73:$V81,74:$V_,79:$V91,90:188},{10:[1,190]},{15:[1,191]},o($V$,[2,92]),{36:[1,192]},{21:[1,193],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($Vf,[2,18]),o($Vf,[2,19]),o($Va1,$Vb1,{80:194,42:$Vc1}),{26:$Vd1,37:196,83:$Ve1,85:$Vf1,86:$Vg1,87:$Vh1},o($Va1,$Vb1,{80:202,42:$Vc1}),{13:[1,203]},{13:[1,204]},{10:$Vi1,20:205,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{13:[1,218]},{21:[1,219],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{29:220,36:$V31},{10:$Vk,11:221,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{13:[1,222]},{32:[1,223]},o($V51,[2,23]),{10:$Vk,11:224,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{19:[1,225]},{10:$Vk,11:226,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{25:227,26:$Vz,28:[1,228],41:68},{10:$Vk,11:229,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{2:$V0,7:73,9:$VA,14:230,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{10:$Vk,11:87,12:$VK,13:$Vl,26:$Vn,38:231,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{21:[1,232]},{10:$Vk,11:233,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{21:[1,234]},{21:[1,235]},o($V51,[2,39]),o($V51,[2,40]),o($V51,[2,41]),{12:[1,236]},{29:237,36:$V31},{21:[1,238]},{12:[2,72]},{10:$Vk,11:239,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($VL,$Vh,{100:240,18:$Vi,71:$Vj}),o($VL,[2,129]),{10:$Vk,11:241,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{12:[1,242]},{12:[1,243]},{10:$Vk,11:244,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($Vt1,[2,43],{50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vt1,[2,44],{50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vu1,[2,45],{52:$VQ,53:$VR}),o($Vu1,[2,46],{52:$VQ,53:$VR}),o($V$,[2,47]),o($V$,[2,48]),o($Vv1,[2,49],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vv1,[2,50],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vv1,[2,51],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vv1,[2,52],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR}),o($Vw1,[2,53],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV}),o($Vw1,[2,54],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV}),o([12,15,21,36,60,61,73,74,79],[2,55],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX}),o([12,15,21,36,61,73,74,79],[2,56],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY}),{36:[1,245],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($V$,[2,58]),{12:[1,246]},{10:[1,247]},{10:[1,248]},{10:[1,249]},{10:[1,250]},o($VL,[2,140]),o($V$,[2,67]),{73:[2,96]},{10:$Vk,11:251,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:252,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V$,[2,91]),{10:$Vk,11:253,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($Vf,[2,17]),{21:$Vx1,79:$Vy1,81:254},{10:$Vk,11:256,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o([12,15,21,30,31,42,79],[2,83]),o($Vz1,$VA1,{84:257,71:$VB1}),o($Vz1,$VA1,{84:259,71:$VB1}),o($Vz1,$VA1,{84:260,71:$VB1}),o($Vz1,$VA1,{84:261,71:$VB1}),o($Vz1,[2,88]),{21:$Vx1,79:$Vy1,81:262},{26:$VC1,92:263},{2:$V0,7:73,9:$VA,14:265,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{12:[1,266],48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1,74:$VR1,79:$VS1},{10:$Vi1,20:283,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:284,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:285,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},o($VT1,[2,160]),o($VT1,[2,161]),o($VT1,$Vh,{100:32,10:[1,286],18:$Vi,71:$Vj}),o($VT1,[2,163]),o($VT1,[2,164]),o($VT1,$V01,{68:287,18:$V11}),o($VT1,$V01,{68:288,18:$V11}),o($VT1,[2,167]),o($VT1,[2,168]),{15:$VU1,23:289,96:$VV1,97:$VW1},{26:[1,292]},{30:[1,293],31:[1,294],42:$VX1},{21:[1,296],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,7:73,9:$VA,14:297,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{10:[1,298]},{12:[1,299],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:[1,300]},{12:[1,301],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:$Vk,11:302,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{26:[1,303]},{12:[1,304],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,7:73,9:$VA,15:[1,305],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{12:[1,306]},o($V51,[2,35]),{21:[1,307],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($V51,[2,37]),o($V51,[2,38]),{36:[1,308]},{12:$VY1,79:$VZ1,98:309},o($Vf,[2,15]),{12:$V61,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_,78:311,79:$V71},o($VL,[2,128]),{12:[1,312],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($VL,$V01,{68:313,18:$V11}),o($VL,$V01,{68:314,18:$V11}),{12:[1,315],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{10:$Vk,11:316,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V$,[2,61]),{10:$Vk,11:317,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{12:[1,318]},{12:[1,319]},{10:$Vk,11:320,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,73:$V81,74:$V_,79:$V91,90:321},{12:[1,322],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{15:[2,95],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_,79:[1,324],89:323},{21:[1,325]},{26:[1,326]},o($Va1,[2,81],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_}),o($Vz1,[2,84]),{73:[1,327]},o($Vz1,[2,85]),o($Vz1,[2,86]),o($Vz1,[2,87]),{21:[1,328]},{15:[1,329]},{29:330,36:$V31},{2:$V0,7:73,9:$VA,15:[1,331],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{21:[1,332]},{10:$Vi1,20:333,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:334,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:335,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:336,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:337,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:338,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:339,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:340,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:341,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:342,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:343,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:344,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:345,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:346,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:347,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{10:$Vi1,20:348,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},o($VT1,[2,142]),o($VT1,[2,157]),{12:[1,349],48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1,74:$VR1,79:$VS1},{10:$Vk,11:87,12:$VK,13:$Vl,26:$Vn,38:350,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($VT1,[2,165]),o($VT1,[2,166]),{15:[1,351]},{10:$Vk,11:352,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{36:[1,353]},{27:354,42:$V_1,43:$V$1,44:$V02},{10:$Vk,11:358,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:359,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:360,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},o($V12,[2,115]),{2:$V0,7:73,9:$VA,15:[1,361],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{10:$Vk,11:362,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{13:[1,363]},{10:$Vi1,20:364,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},{13:[1,365]},{21:[1,366],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{29:367,36:$V31},{13:[1,368]},{32:[1,369]},{21:[1,370]},o($V51,[2,36]),{26:$Vd1,37:371,83:$Ve1,85:$Vf1,86:$Vg1,87:$Vh1},{12:[2,119]},{26:[1,372]},{12:[2,74]},o($VL,$V01,{68:373,18:$V11}),o($VL,[2,132]),o($VL,[2,133]),o($VL,$V01,{68:374,18:$V11}),o([12,15,21,36,73,74,79],[2,69],{48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),{12:[1,375],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($VL,$V01,{68:376,18:$V11}),o($VL,$V01,{68:377,18:$V11}),{12:[1,378],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{73:[2,98]},o($V$,[2,71]),{15:[2,93]},{26:$V21,88:379},o($V41,[2,76]),{29:380,36:$V31},o($Vz1,$VA1,{84:381,71:$VB1}),o($V41,[2,77]),{21:[1,382]},{15:[2,106],21:[1,385],79:[1,384],93:383},o($Vf,$V22,{16:386,94:$V32}),o($Vf,[2,7]),o($V42,[2,143],{50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V42,[2,144],{50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V52,[2,145],{52:$VH1,53:$VI1}),o($V52,[2,146],{52:$VH1,53:$VI1}),o($VT1,[2,147]),o($VT1,[2,148]),o($V62,[2,149],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V62,[2,150],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V62,[2,151],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V62,[2,152],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1}),o($V72,[2,153],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1}),o($V72,[2,154],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1}),o([12,36,60,61,74,79],[2,155],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1}),o([12,36,61,74,79],[2,156],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1}),o([12,36,79],[2,158],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1,74:$VR1}),{36:[1,388],48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1,74:$VR1,79:$VS1},o($VT1,[2,159]),{12:[1,389]},o($Vf,[2,8]),{36:[1,390],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,7:73,9:$VA,14:391,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{12:[1,392]},{12:[2,116]},{12:[2,117]},{10:$Vk,11:393,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{12:[1,394],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{12:[1,395],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{21:[1,396],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($Vf,[2,12]),{12:[1,397],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,7:73,9:$VA,14:398,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{12:[1,399],48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1,74:$VR1,79:$VS1},{15:$VU1,23:400,96:$VV1,97:$VW1},{26:[1,401]},{30:[1,402],31:[1,403],42:$VX1},{2:$V0,7:73,9:$VA,14:404,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{10:[1,405]},o($V51,[2,34]),{13:[1,406]},{29:407,36:$V31},o($VL,[2,131]),o($VL,[2,134]),o($VL,$V01,{68:408,18:$V11}),o($VL,[2,137]),o($VL,[2,138]),o($VL,$V01,{68:409,18:$V11}),{15:[2,94]},o($Va1,$Vb1,{80:410,42:$Vc1}),o($Vz1,[2,89]),o($Vf,[2,100]),{15:[2,101]},{15:[2,104],26:$VC1,92:411},{15:[2,105],26:$VC1,92:412},o($Vf,[2,6]),{9:[1,414],13:[1,415],95:413},{10:$Vi1,20:416,26:$Vj1,41:216,48:$Vk1,62:$Vl1,63:$Vm1,64:$Vn1,65:$Vo1,66:$Vp1,67:$Vq1,69:$Vr1,75:$Vs1},o($VT1,[2,162]),{2:$V0,7:73,9:$VA,14:417,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{2:$V0,7:73,9:$VA,15:[2,112],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{13:[1,418]},{12:[2,118],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{13:[1,419]},{13:[1,420]},o($V12,[2,114]),{21:[1,421]},{2:$V0,7:73,9:$VA,15:[1,422],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{21:[1,423]},{15:[1,424]},{27:425,42:$V_1,43:$V$1,44:$V02},{10:$Vk,11:426,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{10:$Vk,11:427,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{2:$V0,7:73,9:$VA,15:[1,428],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{10:$Vk,11:429,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{2:$V0,4:430,6:3,7:4,8:5,9:$V1,17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,32:$V7,33:$V8,34:$V9,39:$Va,41:15,45:$Vb,46:$Vc,82:$Vd,91:$Ve},{12:$VY1,79:$VZ1,98:431},o($VL,[2,136]),o($VL,[2,139]),{21:$Vx1,79:$Vy1,81:432},{15:[2,102]},{15:[2,103]},o($V41,[2,107]),{10:[1,433]},{2:$V0,7:73,9:$VA,14:434,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},o([12,36,74,79],[2,169],{48:$VD1,49:$VE1,50:$VF1,51:$VG1,52:$VH1,53:$VI1,54:$VJ1,55:$VK1,56:$VL1,57:$VM1,58:$VN1,59:$VO1,60:$VP1,61:$VQ1}),{2:$V0,7:73,9:$VA,15:$VU1,17:$VB,22:$VC,23:435,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd,96:$VV1,97:$VW1},{2:$V0,7:73,9:$VA,14:436,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{2:$V0,7:73,9:$VA,14:437,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{2:$V0,7:73,9:$VA,14:438,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},o($Vf,[2,13]),o($V51,$V22,{16:439,94:$V32}),o($V51,[2,27]),o($V51,[2,28]),{12:[1,440]},{12:[1,441],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{12:[1,442],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($V51,[2,32]),{12:[1,443],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},{2:$V0,6:23,7:4,8:5,9:$V1,15:[1,444],17:$V2,22:$V3,24:$V4,26:$V5,28:$V6,32:$V7,33:$V8,34:$V9,39:$Va,41:15,45:$Vb,46:$Vc,82:$Vd,91:$Ve},{12:[2,121]},{21:[2,79]},{10:$Vk,11:445,13:$Vl,26:$Vn,41:49,48:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,69:$Vv,70:47,71:$Vw,75:$Vx,76:$Vy},{2:$V0,7:73,9:$VA,15:[1,446],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{15:[2,111]},{2:$V0,7:73,9:$VA,15:[1,447],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{2:$V0,7:73,9:$VA,15:[1,448],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{2:$V0,7:73,9:$VA,15:[1,449],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},o($V51,[2,26]),{13:[1,450]},{13:[1,451]},{13:[1,452]},{21:[1,453]},o($Vf,[2,14]),{12:[1,454],48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,55:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,74:$V_},o($V41,[2,110]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),{2:$V0,7:73,9:$VA,14:455,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{2:$V0,7:73,9:$VA,14:456,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},{2:$V0,7:73,9:$VA,14:457,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},o($V51,[2,33]),{13:[1,458]},{2:$V0,7:73,9:$VA,15:[1,459],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{2:$V0,7:73,9:$VA,15:[1,460],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{2:$V0,7:73,9:$VA,15:[1,461],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},{2:$V0,7:73,9:$VA,14:462,17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:72,82:$Vd},o($V51,[2,29]),o($V51,[2,30]),o($V51,[2,31]),{2:$V0,7:73,9:$VA,15:[1,463],17:$VB,22:$VC,24:$VD,26:$VE,28:$V6,32:$VF,33:$VG,39:$VH,41:82,45:$VI,46:$VJ,47:139,82:$Vd},o($V41,$V22,{16:464,94:$V32}),o($V41,[2,109])],
defaultActions: {22:[2,1],157:[2,72],188:[2,96],309:[2,119],311:[2,74],321:[2,98],323:[2,93],355:[2,116],356:[2,117],379:[2,94],383:[2,101],411:[2,102],412:[2,103],431:[2,121],432:[2,79],435:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const TIPO_DATO = require('./instrucciones').TIPO_DATO;
	const TS = require('./instrucciones').TS;
	var salida=[];
	var ArrayDeErrores = [];
	var currentType="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 83;
break;
case 1:return 86;
break;
case 2:return 85;
break;
case 3:return 28;
break;
case 4:return 82;
break;
case 5:return 17;
break;
case 6:return 19;
break;
case 7:return 66;
break;
case 8:return 65;
break;
case 9:return 9;
break;
case 10:return 94;
break;
case 11:return 22;
break;
case 12:return 96;
break;
case 13:return 97;
break;
case 14:return 45;
break;
case 15:return 46;
break;
case 16:return 32;
break;
case 17:return 33;
break;
case 18:return 24;
break;
case 19:return 87;
break;
case 20:return 39;
break;
case 21:return 'R_PUSH';
break;
case 22:return 'R_POP';
break;
case 23:return 101;
break;
case 24:return 91;
break;
case 25:return 30;
break;
case 26:return 31;
break;
case 27:return 34 ;
break;
case 28:return 75;
break;
case 29:return 'R_GRAFICAR_TS';
break;
case 30:return 102;
break;
case 31:return 103;
break;
case 32:return 104;
break;
case 33:return 105;
break;
case 34:return 76;
break;
case 35:return 77;
break;
case 36: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 67;
break;
case 37: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69;
break;
case 38: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 'CADENA_EJECUTABLE';
break;
case 39:return 64;
break;
case 40:return 63;
break;
case 41:return 26;
break;
case 42:
break;
case 43:// comentario simple línea
break;
case 44:// comentario multiple líneas
break;
case 45:return 43;
break;
case 46:return 44;
break;
case 47:return 'ASIGNACION_SUMA';
break;
case 48:return 49;
break;
case 49:return 'ASIGNACION_RESTA';
break;
case 50:return 48;
break;
case 51:return 52;
break;
case 52:return 50;
break;
case 53:return 51;
break;
case 54:return 53;
break;
case 55:return 58;
break;
case 56:return 59;
break;
case 57:return 42;
break;
case 58:return 56;
break;
case 59:return 54;
break;
case 60:return 57;
break;
case 61:return 55;
break;
case 62:return 60;
break;
case 63:return 61;
break;
case 64:return 62;
break;
case 65:return 13;
break;
case 66:return 15;
break;
case 67:return 10;
break;
case 68:return 12;
break;
case 69:return 71;
break;
case 70:return 73;
break;
case 71:return 21;
break;
case 72:return 36;
break;
case 73:return 18;
break;
case 74:return 79;
break;
case 75:return 74;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						 salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						 ArrayDeErrores.push({tipo:"léxico", linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column, descripcion: yy_.yytext});
break;
}
},
rules: [/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:function\b)/i,/^(?:null\b)/i,/^(?:graficar_ts\b)/i,/^(?:CharAt\b)/i,/^(?:toLowerCase\b)/i,/^(?:toUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:"(\\"|\\n|\\t|\\r|\\\\|[^\"])*")/i,/^(?:'(\\'|\\n|\\t|\\r|\\\\|[^\'])*')/i,/^(?:`(\\"|\\n|\\t|\\r|\\\\|[^\`])*`)/i,/^(?:[0-9]+\.([0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-=)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}